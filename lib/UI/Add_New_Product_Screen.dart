import 'package:flutter/material.dart';
import '../api_services/api_services.dart';
import '../model/model.dart';  // Adjust the path based on your project structure// Import your ProductService

class AddNewProductScreen extends StatefulWidget {
  const AddNewProductScreen({super.key});

  @override
  State<AddNewProductScreen> createState() => _AddNewProductScreenState();
}

class _AddNewProductScreenState extends State<AddNewProductScreen> {
  final TextEditingController _productNameTEController = TextEditingController();
  final TextEditingController _unitPriceTEController = TextEditingController();
  final TextEditingController _totalPriceTEController = TextEditingController();
  final TextEditingController _imageTEController = TextEditingController();
  final TextEditingController _codeTEController = TextEditingController();
  final TextEditingController _quantityTEController = TextEditingController();
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  Future<void> _addProduct() async {
    if (_formKey.currentState?.validate() ?? false) {
      // Gather the data
      String productName = _productNameTEController.text;
      String unitPrice = _unitPriceTEController.text;
      String totalPrice = _totalPriceTEController.text;  // Can be calculated
      String productImage = _imageTEController.text;
      String productCode = _codeTEController.text;
      String quantity = _quantityTEController.text;

      // Create a new product
      Product newProduct = Product(
        id: '',  // Assume the ID will be generated by the backend
        productName: productName,
        productCode: productCode,
        productImage: productImage.isNotEmpty ? productImage : 'default_image_url',  // Placeholder image
        unitPrice: unitPrice,
        quantity: quantity,
        totalPrice: totalPrice,
        createdAt: DateTime.now(),  // Use the current date
      );

      // Call the API to save the product
      bool success = await ProductService.postProduct(newProduct);

      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Product added successfully!')),
        );
        Navigator.pop(context);  // Go back to the previous screen
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add product.')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Product'),
      ),
      body: AddNewProductForm(),
    );
  }

  Widget AddNewProductForm() {
    return Form(
      key: _formKey,
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            TextFormField(
              controller: _productNameTEController,
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                hintText: 'Name',
                labelText: 'Product Name',
              ),
              validator: (value) => value?.isEmpty ?? true ? 'Enter a product name' : null,
            ),
            const SizedBox(height: 15),
            TextFormField(
              controller: _unitPriceTEController,
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                hintText: 'Unit Price',
                labelText: 'Unit Price',
              ),
              validator: (value) => value?.isEmpty ?? true ? 'Enter unit price' : null,
            ),
            const SizedBox(height: 15),
            TextFormField(
              controller: _totalPriceTEController,
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                hintText: 'Total Price',
                labelText: 'Total Price',
              ),
              validator: (value) => value?.isEmpty ?? true ? 'Enter total price' : null,
            ),
            const SizedBox(height: 15),
            TextFormField(
              controller: _imageTEController,
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                hintText: 'Product Image',
                labelText: 'Product Image',
              ),
            ),
            const SizedBox(height: 15),
            TextFormField(
              controller: _codeTEController,
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                hintText: 'Code',
                labelText: 'Product Code',
              ),
              validator: (value) => value?.isEmpty ?? true ? 'Enter a product code' : null,
            ),
            const SizedBox(height: 15),
            TextFormField(
              controller: _quantityTEController,
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                hintText: 'Quantity',
                labelText: 'Product Quantity',
              ),
              validator: (value) => value?.isEmpty ?? true ? 'Enter quantity' : null,
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                fixedSize: const Size.fromWidth(double.maxFinite),
                backgroundColor: Colors.blue,
              ),
              onPressed: _addProduct,  // Call the method to add product
              child: const Text('ADD', style: TextStyle(color: Colors.black)),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _productNameTEController.dispose();
    _quantityTEController.dispose();
    _totalPriceTEController.dispose();
    _unitPriceTEController.dispose();
    _imageTEController.dispose();
    _codeTEController.dispose();
    super.dispose();
  }
}
